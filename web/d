import flask
import redis
from flask import Flask
from flask import Response, request
from flask import jsonify
from functools import wraps
from flask import request, Response
import json
import os, sys
import uuid
import hashlib

sys.path.append(os.path.abspath(os.path.join(__file__, '../..')))
from db_objects import organizations
import app_config
import auth

app = Flask(__name__)

def check_fields():
    error_fields = []
    org = organizations.Organizations()
    error_fields
    for k, v in request.json.items():
        if k not in org.get_fields():
            error_fields.append(k)
            continue
    if error_fields:
        return False
    else:
        return True
    
@app.route('/organization/', methods=['PUT', 'GET'])
@auth.requires_auth
def organization_api_key():
    # work with existing organizations
    if request.method == 'PUT':
        # update organization
        org = organizations.Organizations()
        org_name = request.json.get('name')
        domain = request.json.get('domain')
        org.load(name=org_name, domain=domain, api_key=request.headers.get('api_key'))
        if not check_fields():
            return Response(json.dumps(dict(error='fields not correct: {0}'.format(','.join(error_fields)))), status=400, mimetype='application/json')
        else:
            for k, v in request.json.items():
                if k == 'api_key': continue # users should not be able to update their api_key as this could allow hackers to gain access to other orgs.
                if k == 'creation_date': continue # users should not be able to update their creation_date as we'll use this for billing purposes.
                org.set(k, v)
            org.update()
            return Response(json.dumps(dict(success='organization updated')), status=200, mimetype='application/json')


    elif request.method == 'GET':
        org = organizations.Organizations()
        try:
            org.load(name=request.args.get('name'), domain=request.args.get('domain'), api_key=request.headers.get('api_key'))
        except Exception, e:
            print str(e)
            return Response(json.dumps(dict(error='cannot retrieve requested item')), status=400, mimetype='application/json')

        if org.dump():
            org.set('creation_date', str(org.get('creation_date')))
            return Response(json.dumps(org.dump()), status=200, mimetype='application/json')
        else:
            return Response(json.dumps(dict(error='cannot retrieve requested item')), status=400, mimetype='application/json')


@app.route('/organization/', methods=['POST'])
def mk_organization():
    if request.method == 'POST':
        # add organization
        org = organizations.Organizations()
        org.load(name=request.json.get('name'), domain=request.json.get('domain'))
        if org.dump():
            return Response(json.dumps(dict(error='cannot create organization')), status=400, mimetype='application/json')
       
        if not check_fields():
            return Response(json.dumps(dict(error='fields not correct: {0}'.format(','.join(error_fields)))), status=400, mimetype='application/json')

        try:
            org.set('enabled', False)
            org.set('api_key', uuid.uuid4())
            org.set('password', hash_password(request.json.get('password')))
            org.insert() 
            org.load(name=org_name)
            return Response(json.dumps(dict(success='organization created', api_key=org.get('api_key'))), status=200, mimetype='application/json')

        except Exception, e:
            return Response(json.dumps(dict(error='cannot create organization')), status=500, mimetypr='applicate/json') 
    else:
        return Response(json.dumps(dict(error='method not allowed')), status=400, mimetype='application/json')


if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option('--port', dest='port', type='int', default=8080)
    parser.add_option('--ip', dest='ip', type='str', default='0.0.0.0')
    parser.add_option('--debug', dest='debug', action='store_true', default=False)
    opt, arg = parser.parse_args()
    app.run(host=opt.ip, port=opt.port, debug=opt.debug)

